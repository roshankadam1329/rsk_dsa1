*********************
Solution 1: Game with String
-------------------
class Solution {
    public int minValue(String s, int k) {
        // code here
        Map<String, Integer> charaterCount = new HashMap<>();
        
        String maxChar="";
        int maxCount=0;
        int output = 0;
        
        for (String cs: s.split("")) {
            // System.out.println(cs);
            Integer val = charaterCount.getOrDefault(cs, 0);
            val = val + 1;
            if (val > maxCount) {
                maxCount = val;
            }
            charaterCount.put(cs, val);
        }
        PriorityQueue<Integer> queue = new PriorityQueue<>(Comparator.reverseOrder());
        queue.addAll(charaterCount.values());
        
        for (int i =0 ; i < k; i++) {
            queue.add(queue.poll() - 1);
        }
        
        
        while(!queue.isEmpty()) {
            int value = queue.poll();
            output = output + (value * value);
        }

        
        return output;
    }
}


*********************
Solution 2: Peak element
-------------------

class Solution {

    public int peakElement(int[] arr) {
        //solution 1
        // // code here
        // int maxNumber = arr[0];
        // int maxIndex = 0;
        
        // for (int i = 0; i < arr.length;i++) {
        //     if (maxNumber < arr[i]) {
        //         maxNumber = arr[i];
        //         maxIndex = i;
        //     }
        // }
        // return maxIndex;
        
        //solution 2
        int n = arr.length;
        if (arr.length == 1) {
            return 0;
        }
        if (arr[0] > arr[1]) {
            return 0;
        }
        if (arr[n - 1] > arr[n - 2]) {
            return n - 1;
        }
        int h = n - 2;
        int l = 1;
        int mid = (h + l) / 2;
        while (h >= l) {
            mid = (h + l) / 2;
            // if peak
            if (arr[mid] > arr[mid - 1] && arr[mid] > arr[mid + 1] ) {
                return mid;
            }
            
            // next is large
            if (arr[mid] < arr[mid + 1]) {
                l = mid + 1;
            } else {
                // left 
                h = mid - 1;
            }
            
        }
        return mid;
    }
}
